const express = require('express');
const puppeteer = require('puppeteer-core');
const chromium = require('@sparticuz/chromium');
const fs = require('fs');
const path = require('path');

const app = express();
const port = process.env.PORT || 3000;

const proxiesPath = path.join(__dirname, 'proxies.txt');
const proxies = fs.readFileSync(proxiesPath, 'utf-8')
  .split(/\r?\n/)
  .map(line => line.trim())
  .filter(Boolean);

if (!proxies.length) {
  console.error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏');
  process.exit(1);
}

let currentProxyIndex = 0;
let currentProxyCount = 0;
const maxRequestsPerProxy = 10;

function getCurrentProxy() {
  return proxies[currentProxyIndex];
}

function switchToNextProxy() {
  currentProxyIndex = (currentProxyIndex + 1) % proxies.length;
  currentProxyCount = 0;
}

app.get('/tineye', async (req, res) => {
  const { page = 1, url } = req.query;

  if (!url) {
    return res.status(400).json({ error: 'Missing "url" parameter' });
  }

  const searchUrl = `https://tineye.com/api/v1/result_json/?page=${page}&url=${encodeURIComponent(url)}`;

  let browser;
  let finalError = null;

  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø—Ä–æ–∫—Å–∏, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë–º —Ä–∞–±–æ—á–∏–π
  for (let attempt = 0; attempt < proxies.length; attempt++) {
    const proxy = getCurrentProxy();
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏ ${proxy} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1})`);

    try {
      browser = await puppeteer.launch({
        args: [
          ...chromium.args,
          `--proxy-server=${proxy}`
        ],
        executablePath: await chromium.executablePath(),
        headless: chromium.headless,
      });

      const pageP = await browser.newPage();
      await pageP.setUserAgent(
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36'
      );

      // –ë—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç 2 —Å–µ–∫—É–Ω–¥—ã
      await pageP.goto(searchUrl, { waitUntil: 'domcontentloaded', timeout: 2000 });

      const content = await pageP.evaluate(() => document.body.innerText);
      let json;

      try {
        json = JSON.parse(content);
      } catch {
        throw new Error(`JSON parse error: ${content.slice(0, 200)}`);
      }

      // –ï—Å–ª–∏ TinEye –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –∏–¥—ë–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ–∫—Å–∏
      if (!json || Object.keys(json).length === 0) {
        throw new Error('TinEye –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç');
      }

      // –°—á—ë—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏
      currentProxyCount++;
      if (currentProxyCount >= maxRequestsPerProxy) {
        console.log(`üîÑ –ü—Ä–æ–∫—Å–∏ ${proxy} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è`);
        switchToNextProxy();
      }

      return res.status(200).json({
        proxyUsed: proxy,
        proxyIndex: currentProxyIndex,
        requestCountForProxy: currentProxyCount,
        data: json
      });

    } catch (err) {
      console.error(`‚ùå –ü—Ä–æ–∫—Å–∏ ${getCurrentProxy()} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${err.message}`);
      finalError = err;
      switchToNextProxy();
    } finally {
      if (browser) {
        try { await browser.close(); } catch {}
      }
    }
  }

  res.status(500).json({
    error: '–í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏',
    lastError: finalError ? finalError.message : null
  });
});

app.listen(port, () => {
  console.log(`üöÄ TinEye proxy listening on port ${port}`);
});
