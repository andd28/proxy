// index.js ‚Äî —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Å–µ—Å—Å–∏–µ–π –Ω–∞ 20 URL, –æ–±—Ä–∞–±–æ—Ç–∫–æ–π "Too simple" –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏

const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch'); // v2
const { SocksProxyAgent } = require('socks-proxy-agent');

const proxiesPath = path.join(__dirname, 'proxies.txt');

let proxies = [];
try {
  proxies = fs.readFileSync(proxiesPath, 'utf8')
    .split(/\r?\n/)
    .map(s => s.trim())
    .filter(Boolean);
  console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–∫—Å–∏ –∏–∑ proxies.txt: ${proxies.length}`);
} catch (e) {
  console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è proxies.txt:', e && e.message);
}

if (proxies.length === 0) {
  console.warn('–í–Ω–∏–º–∞–Ω–∏–µ! –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç.');
}

let currentProxyIndex = 0;
let requestCounter = 0;
const requestsPerProxy = 20;

process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';

function switchToNextProxy() {
  if (proxies.length === 0) return;
  currentProxyIndex = (currentProxyIndex + 1) % proxies.length;
  requestCounter = 0;
  console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ –ø—Ä–æ–∫—Å–∏ #${currentProxyIndex}: ${proxies[currentProxyIndex]}`);
}

function createAgent(proxy) {
  return new SocksProxyAgent(`socks4://${proxy}`);
}

async function fetchWithProxy(url, attemptsLeft = proxies.length, retryOnSameProxy = 1) {
  if (proxies.length === 0) {
    throw new Error('–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!');
  }
  if (attemptsLeft <= 0) {
    throw new Error('–í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ (–∏—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏).');
  }

  if (requestCounter >= requestsPerProxy) {
    console.log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ${requestsPerProxy} –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Üí –º–µ–Ω—è–µ–º –ø—Ä–æ–∫—Å–∏`);
    switchToNextProxy();
  }

  const proxy = proxies[currentProxyIndex];
  console.log(`‚û°Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ #${currentProxyIndex}: ${proxy} (${requestCounter + 1}/${requestsPerProxy})`);

  const agent = createAgent(proxy);

  try {
    const res = await fetch(url, { agent, timeout: 8000 });

    if (res.status === 429) {
      console.warn(`üö´ HTTP 429 –æ—Ç –ø—Ä–æ–∫—Å–∏ ${proxy} ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ`);
      switchToNextProxy();
      return fetchWithProxy(url, attemptsLeft - 1);
    }

    if (!res.ok) {
      throw new Error(`HTTP —Å—Ç–∞—Ç—É—Å ${res.status}`);
    }

    const json = await res.json();
    if (!json) {
      throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç TinEye');
    }

    if (json.error && String(json.error).toLowerCase().includes('too simple')) {
      console.warn(`‚ÑπÔ∏è TinEye –≤–µ—Ä–Ω—É–ª "Too simple" (—ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞).`);
      // –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
      requestCounter++;
      return json;
    }

    // —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    requestCounter++;
    return json;

  } catch (err) {
    const msg = err.message || '';
    console.warn(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ ${proxy}: ${msg}`);

    if (
      msg.includes('Client network socket disconnected before secure') ||
      msg.includes('ECONNRESET') ||
      msg.includes('ETIMEDOUT') ||
      msg.includes('Proxy connection timed out')
    ) {
      if (retryOnSameProxy > 0) {
        console.warn(`‚Ü©Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞ —Ç–æ–º –∂–µ –ø—Ä–æ–∫—Å–∏ (${proxy}), –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–æ–≤: ${retryOnSameProxy}`);
        return fetchWithProxy(url, attemptsLeft, retryOnSameProxy - 1);
      }
      console.warn(`‚ö° –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏`);
      switchToNextProxy();
      return fetchWithProxy(url, attemptsLeft - 1);
    }

    console.error(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${attemptsLeft - 1}`);
    switchToNextProxy();
    return fetchWithProxy(url, attemptsLeft - 1);
  }
}

// Vercel handler
module.exports = async (req, res) => {
  try {
    const base = `https://${req.headers.host || 'example.com'}`;
    const reqUrl = new URL(req.url, base);
    const page = reqUrl.searchParams.get('page') || '1';
    const imageUrl = reqUrl.searchParams.get('url');
    const tags = reqUrl.searchParams.get('tags');

    if (!imageUrl) {
      res.statusCode = 400;
      res.setHeader('content-type', 'application/json; charset=utf-8');
      res.end(JSON.stringify({ error: 'Missing "url" query parameter' }));
      return;
    }

    let searchUrl = `https://tineye.com/api/v1/result_json/?page=${page}&url=${encodeURIComponent(imageUrl)}`;
    if (tags) {
      searchUrl += `&tags=${encodeURIComponent(tags)}`;
    }

    console.log('üîç TinEye URL:', searchUrl);

    const tineyeJson = await fetchWithProxy(searchUrl);

    res.statusCode = 200;
    res.setHeader('content-type', 'application/json; charset=utf-8');
    res.end(JSON.stringify(tineyeJson));
  } catch (err) {
    console.error('Handler error:', err);
    res.statusCode = 500;
    res.setHeader('content-type', 'application/json; charset=utf-8');
    res.end(JSON.stringify({ error: err.message || String(err) }));
  }
};

// –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
if (require.main === module) {
  const express = require('express');
  const app = express();
  app.get('/tineye', module.exports);
  const port = process.env.PORT || 3000;
  app.listen(port, () => console.log(`Local test server: http://localhost:${port}/tineye`));
}
